// This file is autogenerated from YapCodeGen. Do not Edit 

/* @@@LICENSE
*
*      Copyright (c) 2012 Hewlett-Packard Development Company, L.P.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
LICENSE@@@ */

#include <stdlib.h>
#include <stdio.h>
#include <BrowserServerBase.h>

void BrowserServerBase::handleSyncCommand(YapProxy* proxy, YapPacket* cmd, YapPacket* reply)
{
	int16_t cmdValue;

	(*cmd) >> cmdValue;

	switch (cmdValue) {
	case 0x0014: { // RenderToFile
		
		char* filename = 0;
		int32_t viewX = 0;
		int32_t viewY = 0;
		int32_t viewW = 0;
		int32_t viewH = 0;
		
		int32_t result = 0;
		
		(*cmd) >> filename;
		(*cmd) >> viewX;
		(*cmd) >> viewY;
		(*cmd) >> viewW;
		(*cmd) >> viewH;
		
		syncCmdRenderToFile(proxy, filename, viewX, viewY, viewW, viewH, result);
		
		(*reply) << result;
		
		if (filename) free(filename);
		
		break;
	}
	default:
		fprintf(stderr, "Unknown sync cmd: %d\n", cmdValue);
	}
}

void BrowserServerBase::handleAsyncCommand(YapProxy* proxy, YapPacket* cmd)
{
	int16_t cmdValue;

	(*cmd) >> cmdValue;

	switch (cmdValue) {
	case 0x1000: { // Connect
		
		int32_t pageWidth = 0;
		int32_t pageHeight = 0;
		int32_t sharedBufferKey1 = 0;
		int32_t sharedBufferKey2 = 0;
		int32_t sharedBufferSize = 0;
		int32_t identifier = 0;
		
		(*cmd) >> pageWidth;
		(*cmd) >> pageHeight;
		(*cmd) >> sharedBufferKey1;
		(*cmd) >> sharedBufferKey2;
		(*cmd) >> sharedBufferSize;
		(*cmd) >> identifier;
		
		asyncCmdConnect(proxy, pageWidth, pageHeight, sharedBufferKey1, sharedBufferKey2, sharedBufferSize, identifier);
		
		
		break;
	}
	case 0x1001: { // SetWindowSize
		
		int32_t width = 0;
		int32_t height = 0;
		
		(*cmd) >> width;
		(*cmd) >> height;
		
		asyncCmdSetWindowSize(proxy, width, height);
		
		
		break;
	}
	case 0x1003: { // SetUserAgent
		
		char* userAgent = 0;
		
		(*cmd) >> userAgent;
		
		asyncCmdSetUserAgent(proxy, userAgent);
		
		if (userAgent) free(userAgent);
		
		break;
	}
	case 0x1004: { // OpenUrl
		
		char* url = 0;
		
		(*cmd) >> url;
		
		asyncCmdOpenUrl(proxy, url);
		
		if (url) free(url);
		
		break;
	}
	case 0x1005: { // SetHtml
		
		char* url = 0;
		char* body = 0;
		
		(*cmd) >> url;
		(*cmd) >> body;
		
		asyncCmdSetHtml(proxy, url, body);
		
		if (url) free(url);
		if (body) free(body);
		
		break;
	}
	case 0x1007: { // ClickAt
		
		int32_t contentX = 0;
		int32_t contentY = 0;
		int32_t numClicks = 0;
		int32_t counter = 0;
		
		(*cmd) >> contentX;
		(*cmd) >> contentY;
		(*cmd) >> numClicks;
		(*cmd) >> counter;
		
		asyncCmdClickAt(proxy, contentX, contentY, numClicks, counter);
		
		
		break;
	}
	case 0x1008: { // KeyDown
		
		uint16_t key = 0;
		uint16_t modifiers = 0;
		
		(*cmd) >> key;
		(*cmd) >> modifiers;
		
		asyncCmdKeyDown(proxy, key, modifiers);
		
		
		break;
	}
	case 0x1009: { // KeyUp
		
		uint16_t key = 0;
		uint16_t modifiers = 0;
		
		(*cmd) >> key;
		(*cmd) >> modifiers;
		
		asyncCmdKeyUp(proxy, key, modifiers);
		
		
		break;
	}
	case 0x100A: { // Forward
		
		
		
		asyncCmdForward(proxy);
		
		
		break;
	}
	case 0x100B: { // Back
		
		
		
		asyncCmdBack(proxy);
		
		
		break;
	}
	case 0x100C: { // Reload
		
		
		
		asyncCmdReload(proxy);
		
		
		break;
	}
	case 0x100D: { // Stop
		
		
		
		asyncCmdStop(proxy);
		
		
		break;
	}
	case 0x1010: { // PageFocused
		
		bool focused = 0;
		
		(*cmd) >> focused;
		
		asyncCmdPageFocused(proxy, focused);
		
		
		break;
	}
	case 0x1011: { // Exit
		
		
		
		asyncCmdExit(proxy);
		
		
		break;
	}
	case 0x1015: { // CancelDownload
		
		char* url = 0;
		
		(*cmd) >> url;
		
		asyncCmdCancelDownload(proxy, url);
		
		if (url) free(url);
		
		break;
	}
	case 0x1016: { // InterrogateClicks
		
		bool enable = 0;
		
		(*cmd) >> enable;
		
		asyncCmdInterrogateClicks(proxy, enable);
		
		
		break;
	}
	case 0x1017: { // ZoomSmartCalculateRequest
		
		int32_t pointX = 0;
		int32_t pointY = 0;
		
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		
		asyncCmdZoomSmartCalculateRequest(proxy, pointX, pointY);
		
		
		break;
	}
	case 0x101A: { // DragStart
		
		int32_t contentX = 0;
		int32_t contentY = 0;
		
		(*cmd) >> contentX;
		(*cmd) >> contentY;
		
		asyncCmdDragStart(proxy, contentX, contentY);
		
		
		break;
	}
	case 0x101B: { // DragProcess
		
		int32_t deltaX = 0;
		int32_t deltaY = 0;
		
		(*cmd) >> deltaX;
		(*cmd) >> deltaY;
		
		asyncCmdDragProcess(proxy, deltaX, deltaY);
		
		
		break;
	}
	case 0x101C: { // DragEnd
		
		int32_t contentX = 0;
		int32_t contentY = 0;
		
		(*cmd) >> contentX;
		(*cmd) >> contentY;
		
		asyncCmdDragEnd(proxy, contentX, contentY);
		
		
		break;
	}
	case 0x1103: { // SetMinFontSize
		
		int32_t minFontSizePt = 0;
		
		(*cmd) >> minFontSizePt;
		
		asyncCmdSetMinFontSize(proxy, minFontSizePt);
		
		
		break;
	}
	case 0x1104: { // FindString
		
		char* str = 0;
		bool fwd = 0;
		
		(*cmd) >> str;
		(*cmd) >> fwd;
		
		asyncCmdFindString(proxy, str, fwd);
		
		if (str) free(str);
		
		break;
	}
	case 0x1105: { // ClearSelection
		
		
		
		asyncCmdClearSelection(proxy);
		
		
		break;
	}
	case 0x1106: { // ClearCache
		
		
		
		asyncCmdClearCache(proxy);
		
		
		break;
	}
	case 0x1107: { // ClearCookies
		
		
		
		asyncCmdClearCookies(proxy);
		
		
		break;
	}
	case 0x1108: { // PopupMenuSelect
		
		char* identifier = 0;
		int32_t selectedIdx = 0;
		
		(*cmd) >> identifier;
		(*cmd) >> selectedIdx;
		
		asyncCmdPopupMenuSelect(proxy, identifier, selectedIdx);
		
		if (identifier) free(identifier);
		
		break;
	}
	case 0x1109: { // SetEnableJavaScript
		
		bool enable = 0;
		
		(*cmd) >> enable;
		
		asyncCmdSetEnableJavaScript(proxy, enable);
		
		
		break;
	}
	case 0x110A: { // SetBlockPopups
		
		bool enable = 0;
		
		(*cmd) >> enable;
		
		asyncCmdSetBlockPopups(proxy, enable);
		
		
		break;
	}
	case 0x110B: { // SetAcceptCookies
		
		bool enable = 0;
		
		(*cmd) >> enable;
		
		asyncCmdSetAcceptCookies(proxy, enable);
		
		
		break;
	}
	case 0x110C: { // MouseEvent
		
		int32_t type = 0;
		int32_t contentX = 0;
		int32_t contentY = 0;
		int32_t detail = 0;
		
		(*cmd) >> type;
		(*cmd) >> contentX;
		(*cmd) >> contentY;
		(*cmd) >> detail;
		
		asyncCmdMouseEvent(proxy, type, contentX, contentY, detail);
		
		
		break;
	}
	case 0x110D: { // GestureEvent
		
		int32_t type = 0;
		int32_t contentX = 0;
		int32_t contentY = 0;
		double scale = 0;
		double rotate = 0;
		int32_t centerX = 0;
		int32_t centerY = 0;
		
		(*cmd) >> type;
		(*cmd) >> contentX;
		(*cmd) >> contentY;
		(*cmd) >> scale;
		(*cmd) >> rotate;
		(*cmd) >> centerX;
		(*cmd) >> centerY;
		
		asyncCmdGestureEvent(proxy, type, contentX, contentY, scale, rotate, centerX, centerY);
		
		
		break;
	}
	case 0x110E: { // Disconnect
		
		
		
		asyncCmdDisconnect(proxy);
		
		
		break;
	}
	case 0x110F: { // InspectUrlAtPoint
		
		int32_t queryNum = 0;
		int32_t pointX = 0;
		int32_t pointY = 0;
		
		(*cmd) >> queryNum;
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		
		asyncCmdInspectUrlAtPoint(proxy, queryNum, pointX, pointY);
		
		
		break;
	}
	case 0x1111: { // GetHistoryState
		
		int32_t queryNum = 0;
		
		(*cmd) >> queryNum;
		
		asyncCmdGetHistoryState(proxy, queryNum);
		
		
		break;
	}
	case 0x1112: { // ClearHistory
		
		
		
		asyncCmdClearHistory(proxy);
		
		
		break;
	}
	case 0x1113: { // SetAppIdentifier
		
		char* identifier = 0;
		
		(*cmd) >> identifier;
		
		asyncCmdSetAppIdentifier(proxy, identifier);
		
		if (identifier) free(identifier);
		
		break;
	}
	case 0x1114: { // AddUrlRedirect
		
		char* urlRe = 0;
		int32_t type = 0;
		bool redirect = 0;
		char* userData = 0;
		
		(*cmd) >> urlRe;
		(*cmd) >> type;
		(*cmd) >> redirect;
		(*cmd) >> userData;
		
		asyncCmdAddUrlRedirect(proxy, urlRe, type, redirect, userData);
		
		if (urlRe) free(urlRe);
		if (userData) free(userData);
		
		break;
	}
	case 0x1115: { // SetShowClickedLink
		
		bool enable = 0;
		
		(*cmd) >> enable;
		
		asyncCmdSetShowClickedLink(proxy, enable);
		
		
		break;
	}
	case 0x1116: { // GetInteractiveNodeRects
		
		int32_t pointX = 0;
		int32_t pointY = 0;
		
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		
		asyncCmdGetInteractiveNodeRects(proxy, pointX, pointY);
		
		
		break;
	}
	case 0x1117: { // IsEditing
		
		int32_t queryNum = 0;
		
		(*cmd) >> queryNum;
		
		asyncCmdIsEditing(proxy, queryNum);
		
		
		break;
	}
	case 0x1118: { // InsertStringAtCursor
		
		char* text = 0;
		
		(*cmd) >> text;
		
		asyncCmdInsertStringAtCursor(proxy, text);
		
		if (text) free(text);
		
		break;
	}
	case 0x1119: { // EnableSelection
		
		int32_t pointX = 0;
		int32_t pointY = 0;
		
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		
		asyncCmdEnableSelection(proxy, pointX, pointY);
		
		
		break;
	}
	case 0x111A: { // DisableSelection
		
		
		
		asyncCmdDisableSelection(proxy);
		
		
		break;
	}
	case 0x111B: { // SaveImageAtPoint
		
		int32_t queryNum = 0;
		int32_t pointX = 0;
		int32_t pointY = 0;
		char* dstDir = 0;
		
		(*cmd) >> queryNum;
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		(*cmd) >> dstDir;
		
		asyncCmdSaveImageAtPoint(proxy, queryNum, pointX, pointY, dstDir);
		
		if (dstDir) free(dstDir);
		
		break;
	}
	case 0x111C: { // GetImageInfoAtPoint
		
		int32_t queryNum = 0;
		int32_t pointX = 0;
		int32_t pointY = 0;
		
		(*cmd) >> queryNum;
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		
		asyncCmdGetImageInfoAtPoint(proxy, queryNum, pointX, pointY);
		
		
		break;
	}
	case 0x111D: { // IsInteractiveAtPoint
		
		int32_t queryNum = 0;
		int32_t pointX = 0;
		int32_t pointY = 0;
		
		(*cmd) >> queryNum;
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		
		asyncCmdIsInteractiveAtPoint(proxy, queryNum, pointX, pointY);
		
		
		break;
	}
	case 0x111E: { // GetElementInfoAtPoint
		
		int32_t queryNum = 0;
		int32_t pointX = 0;
		int32_t pointY = 0;
		
		(*cmd) >> queryNum;
		(*cmd) >> pointX;
		(*cmd) >> pointY;
		
		asyncCmdGetElementInfoAtPoint(proxy, queryNum, pointX, pointY);
		
		
		break;
	}
	case 0x111F: { // SelectAll
		
		
		
		asyncCmdSelectAll(proxy);
		
		
		break;
	}
	case 0x1120: { // Copy
		
		int32_t queryNum = 0;
		
		(*cmd) >> queryNum;
		
		asyncCmdCopy(proxy, queryNum);
		
		
		break;
	}
	case 0x1121: { // Paste
		
		
		
		asyncCmdPaste(proxy);
		
		
		break;
	}
	case 0x1122: { // Cut
		
		
		
		asyncCmdCut(proxy);
		
		
		break;
	}
	case 0x1123: { // SetMouseMode
		
		int32_t mode = 0;
		
		(*cmd) >> mode;
		
		asyncCmdSetMouseMode(proxy, mode);
		
		
		break;
	}
	case 0x1124: { // DisableEnhancedViewport
		
		bool disable = 0;
		
		(*cmd) >> disable;
		
		asyncCmdDisableEnhancedViewport(proxy, disable);
		
		
		break;
	}
	case 0x1125: { // IgnoreMetaTags
		
		bool ignore = 0;
		
		(*cmd) >> ignore;
		
		asyncCmdIgnoreMetaTags(proxy, ignore);
		
		
		break;
	}
	case 0x1500: { // SetScrollPosition
		
		int32_t cx = 0;
		int32_t cy = 0;
		int32_t cw = 0;
		int32_t ch = 0;
		
		(*cmd) >> cx;
		(*cmd) >> cy;
		(*cmd) >> cw;
		(*cmd) >> ch;
		
		asyncCmdSetScrollPosition(proxy, cx, cy, cw, ch);
		
		
		break;
	}
	case 0x1501: { // PluginSpotlightStart
		
		int32_t cx = 0;
		int32_t cy = 0;
		int32_t cw = 0;
		int32_t ch = 0;
		
		(*cmd) >> cx;
		(*cmd) >> cy;
		(*cmd) >> cw;
		(*cmd) >> ch;
		
		asyncCmdPluginSpotlightStart(proxy, cx, cy, cw, ch);
		
		
		break;
	}
	case 0x1502: { // PluginSpotlightEnd
		
		
		
		asyncCmdPluginSpotlightEnd(proxy);
		
		
		break;
	}
	case 0x1503: { // HideSpellingWidget
		
		
		
		asyncCmdHideSpellingWidget(proxy);
		
		
		break;
	}
	case 0x1504: { // SetNetworkInterface
		
		char* interfaceName = 0;
		
		(*cmd) >> interfaceName;
		
		asyncCmdSetNetworkInterface(proxy, interfaceName);
		
		if (interfaceName) free(interfaceName);
		
		break;
	}
	case 0x1505: { // HitTest
		
		int32_t queryNum = 0;
		int32_t cx = 0;
		int32_t cy = 0;
		
		(*cmd) >> queryNum;
		(*cmd) >> cx;
		(*cmd) >> cy;
		
		asyncCmdHitTest(proxy, queryNum, cx, cy);
		
		
		break;
	}
	case 0x1506: { // SetVirtualWindowSize
		
		int32_t width = 0;
		int32_t height = 0;
		
		(*cmd) >> width;
		(*cmd) >> height;
		
		asyncCmdSetVirtualWindowSize(proxy, width, height);
		
		
		break;
	}
	case 0x1507: { // PrintFrame
		
		char* frameName = 0;
		int32_t lpsJobId = 0;
		int32_t width = 0;
		int32_t height = 0;
		int32_t dpi = 0;
		bool landscape = 0;
		bool reverseOrder = 0;
		
		(*cmd) >> frameName;
		(*cmd) >> lpsJobId;
		(*cmd) >> width;
		(*cmd) >> height;
		(*cmd) >> dpi;
		(*cmd) >> landscape;
		(*cmd) >> reverseOrder;
		
		asyncCmdPrintFrame(proxy, frameName, lpsJobId, width, height, dpi, landscape, reverseOrder);
		
		if (frameName) free(frameName);
		
		break;
	}
	case 0x1508: { // TouchEvent
		
		int32_t type = 0;
		int32_t touchCount = 0;
		int32_t modifiers = 0;
		char* touchesJson = 0;
		
		(*cmd) >> type;
		(*cmd) >> touchCount;
		(*cmd) >> modifiers;
		(*cmd) >> touchesJson;
		
		asyncCmdTouchEvent(proxy, type, touchCount, modifiers, touchesJson);
		
		if (touchesJson) free(touchesJson);
		
		break;
	}
	case 0x1509: { // HoldAt
		
		int32_t contentX = 0;
		int32_t contentY = 0;
		
		(*cmd) >> contentX;
		(*cmd) >> contentY;
		
		asyncCmdHoldAt(proxy, contentX, contentY);
		
		
		break;
	}
	case 0x150a: { // GetTextCaretBounds
		
		int32_t queryNum = 0;
		
		(*cmd) >> queryNum;
		
		asyncCmdGetTextCaretBounds(proxy, queryNum);
		
		
		break;
	}
	case 0x150b: { // Freeze
		
		
		
		asyncCmdFreeze(proxy);
		
		
		break;
	}
	case 0x150c: { // Thaw
		
		int32_t sharedBufferKey1 = 0;
		int32_t sharedBufferKey2 = 0;
		int32_t sharedBufferSize = 0;
		
		(*cmd) >> sharedBufferKey1;
		(*cmd) >> sharedBufferKey2;
		(*cmd) >> sharedBufferSize;
		
		asyncCmdThaw(proxy, sharedBufferKey1, sharedBufferKey2, sharedBufferSize);
		
		
		break;
	}
	case 0x150d: { // ReturnBuffer
		
		int32_t sharedBufferKey = 0;
		
		(*cmd) >> sharedBufferKey;
		
		asyncCmdReturnBuffer(proxy, sharedBufferKey);
		
		
		break;
	}
	case 0x150e: { // SetZoomAndScroll
		
		double zoom = 0;
		int32_t cx = 0;
		int32_t cy = 0;
		
		(*cmd) >> zoom;
		(*cmd) >> cx;
		(*cmd) >> cy;
		
		asyncCmdSetZoomAndScroll(proxy, zoom, cx, cy);
		
		
		break;
	}
	case 0x150f: { // ScrollLayer
		
		int32_t id = 0;
		int32_t deltaX = 0;
		int32_t deltaY = 0;
		
		(*cmd) >> id;
		(*cmd) >> deltaX;
		(*cmd) >> deltaY;
		
		asyncCmdScrollLayer(proxy, id, deltaX, deltaY);
		
		
		break;
	}
	case 0x1510: { // SetDNSServers
		
		char* servers = 0;
		
		(*cmd) >> servers;
		
		asyncCmdSetDNSServers(proxy, servers);
		
		if (servers) free(servers);
		
		break;
	}
	default:
		fprintf(stderr, "Unknown async cmd: %d\n", cmdValue);
	}
}

void BrowserServerBase::msgPainted(YapProxy* proxy, int32_t sharedBufferKey)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2000; // Painted
	(*pkt) << sharedBufferKey;
	proxy->sendMessage();
}

void BrowserServerBase::msgReportError(YapProxy* proxy, const char* url, int32_t code, const char* msg)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2001; // ReportError
	(*pkt) << url;
	(*pkt) << code;
	(*pkt) << msg;
	proxy->sendMessage();
}

void BrowserServerBase::msgContentsSizeChanged(YapProxy* proxy, int32_t width, int32_t height)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2002; // ContentsSizeChanged
	(*pkt) << width;
	(*pkt) << height;
	proxy->sendMessage();
}

void BrowserServerBase::msgScrolledTo(YapProxy* proxy, int32_t contentsX, int32_t contentsY)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2004; // ScrolledTo
	(*pkt) << contentsX;
	(*pkt) << contentsY;
	proxy->sendMessage();
}

void BrowserServerBase::msgLoadStarted(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2005; // LoadStarted
	proxy->sendMessage();
}

void BrowserServerBase::msgLoadStopped(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2006; // LoadStopped
	proxy->sendMessage();
}

void BrowserServerBase::msgLoadProgress(YapProxy* proxy, int32_t progress)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2007; // LoadProgress
	(*pkt) << progress;
	proxy->sendMessage();
}

void BrowserServerBase::msgLocationChanged(YapProxy* proxy, const char* uri, bool canGoBack, bool canGoForward)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2008; // LocationChanged
	(*pkt) << uri;
	(*pkt) << canGoBack;
	(*pkt) << canGoForward;
	proxy->sendMessage();
}

void BrowserServerBase::msgTitleChanged(YapProxy* proxy, const char* title)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2009; // TitleChanged
	(*pkt) << title;
	proxy->sendMessage();
}

void BrowserServerBase::msgTitleAndUrlChanged(YapProxy* proxy, const char* title, const char* url, bool canGoBack, bool canGoForward)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x200A; // TitleAndUrlChanged
	(*pkt) << title;
	(*pkt) << url;
	(*pkt) << canGoBack;
	(*pkt) << canGoForward;
	proxy->sendMessage();
}

void BrowserServerBase::msgDialogAlert(YapProxy* proxy, const char* syncPipePath, const char* msg)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x200B; // DialogAlert
	(*pkt) << syncPipePath;
	(*pkt) << msg;
	proxy->sendMessage();
}

void BrowserServerBase::msgDialogConfirm(YapProxy* proxy, const char* syncPipePath, const char* msg)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x200C; // DialogConfirm
	(*pkt) << syncPipePath;
	(*pkt) << msg;
	proxy->sendMessage();
}

void BrowserServerBase::msgDialogPrompt(YapProxy* proxy, const char* syncPipePath, const char* msg, const char* defaultValue)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x200D; // DialogPrompt
	(*pkt) << syncPipePath;
	(*pkt) << msg;
	(*pkt) << defaultValue;
	proxy->sendMessage();
}

void BrowserServerBase::msgDialogUserPassword(YapProxy* proxy, const char* syncPipePath, const char* msg)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x200E; // DialogUserPassword
	(*pkt) << syncPipePath;
	(*pkt) << msg;
	proxy->sendMessage();
}

void BrowserServerBase::msgActionData(YapProxy* proxy, const char* dataType, const char* data)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x200F; // ActionData
	(*pkt) << dataType;
	(*pkt) << data;
	proxy->sendMessage();
}

void BrowserServerBase::msgDownloadStart(YapProxy* proxy, const char* url)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2010; // DownloadStart
	(*pkt) << url;
	proxy->sendMessage();
}

void BrowserServerBase::msgDownloadProgress(YapProxy* proxy, const char* url, int32_t totalSizeSoFar, int32_t totalSize)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2011; // DownloadProgress
	(*pkt) << url;
	(*pkt) << totalSizeSoFar;
	(*pkt) << totalSize;
	proxy->sendMessage();
}

void BrowserServerBase::msgDownloadError(YapProxy* proxy, const char* url, const char* errorMsg)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2012; // DownloadError
	(*pkt) << url;
	(*pkt) << errorMsg;
	proxy->sendMessage();
}

void BrowserServerBase::msgDownloadFinished(YapProxy* proxy, const char* url, const char* mimeType, const char* tmpFilePath)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2013; // DownloadFinished
	(*pkt) << url;
	(*pkt) << mimeType;
	(*pkt) << tmpFilePath;
	proxy->sendMessage();
}

void BrowserServerBase::msgLinkClicked(YapProxy* proxy, const char* url)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2014; // LinkClicked
	(*pkt) << url;
	proxy->sendMessage();
}

void BrowserServerBase::msgMimeHandoffUrl(YapProxy* proxy, const char* mimeType, const char* url)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2015; // MimeHandoffUrl
	(*pkt) << mimeType;
	(*pkt) << url;
	proxy->sendMessage();
}

void BrowserServerBase::msgMimeNotSupported(YapProxy* proxy, const char* mimeType, const char* url)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2016; // MimeNotSupported
	(*pkt) << mimeType;
	(*pkt) << url;
	proxy->sendMessage();
}

void BrowserServerBase::msgCreatePage(YapProxy* proxy, int32_t identifier)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2017; // CreatePage
	(*pkt) << identifier;
	proxy->sendMessage();
}

void BrowserServerBase::msgClickRejected(YapProxy* proxy, int32_t counter)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2018; // ClickRejected
	(*pkt) << counter;
	proxy->sendMessage();
}

void BrowserServerBase::msgPopupMenuShow(YapProxy* proxy, const char* identifier, const char* menuDataFileName)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2019; // PopupMenuShow
	(*pkt) << identifier;
	(*pkt) << menuDataFileName;
	proxy->sendMessage();
}

void BrowserServerBase::msgPopupMenuHide(YapProxy* proxy, const char* identifier)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x201A; // PopupMenuHide
	(*pkt) << identifier;
	proxy->sendMessage();
}

void BrowserServerBase::msgSmartZoomCalculateResponseSimple(YapProxy* proxy, int32_t pointX, int32_t pointY, int32_t left, int32_t top, int32_t right, int32_t bottom, int32_t fullscreenSpotlightHandle)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x201F; // SmartZoomCalculateResponseSimple
	(*pkt) << pointX;
	(*pkt) << pointY;
	(*pkt) << left;
	(*pkt) << top;
	(*pkt) << right;
	(*pkt) << bottom;
	(*pkt) << fullscreenSpotlightHandle;
	proxy->sendMessage();
}

void BrowserServerBase::msgFailedLoad(YapProxy* proxy, const char* domain, int32_t errorCode, const char* failingURL, const char* localizedDescription)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x201C; // FailedLoad
	(*pkt) << domain;
	(*pkt) << errorCode;
	(*pkt) << failingURL;
	(*pkt) << localizedDescription;
	proxy->sendMessage();
}

void BrowserServerBase::msgEditorFocused(YapProxy* proxy, bool focused, int32_t fieldType, int32_t fieldActions)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x201D; // EditorFocused
	(*pkt) << focused;
	(*pkt) << fieldType;
	(*pkt) << fieldActions;
	proxy->sendMessage();
}

void BrowserServerBase::msgDidFinishDocumentLoad(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x201E; // DidFinishDocumentLoad
	proxy->sendMessage();
}

void BrowserServerBase::msgUpdateGlobalHistory(YapProxy* proxy, const char* url, bool reload)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2020; // UpdateGlobalHistory
	(*pkt) << url;
	(*pkt) << reload;
	proxy->sendMessage();
}

void BrowserServerBase::msgSetMainDocumentError(YapProxy* proxy, const char* domain, int32_t errorCode, const char* failingURL, const char* localizedDescription)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2021; // SetMainDocumentError
	(*pkt) << domain;
	(*pkt) << errorCode;
	(*pkt) << failingURL;
	(*pkt) << localizedDescription;
	proxy->sendMessage();
}

void BrowserServerBase::msgPurgePage(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2022; // PurgePage
	proxy->sendMessage();
}

void BrowserServerBase::msgInspectUrlAtPointResponse(YapProxy* proxy, int32_t queryNum, bool succeeded, const char* url, const char* desc, int32_t rectWidth, int32_t rectHeight, int32_t rectX, int32_t rectY)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2023; // InspectUrlAtPointResponse
	(*pkt) << queryNum;
	(*pkt) << succeeded;
	(*pkt) << url;
	(*pkt) << desc;
	(*pkt) << rectWidth;
	(*pkt) << rectHeight;
	(*pkt) << rectX;
	(*pkt) << rectY;
	proxy->sendMessage();
}

void BrowserServerBase::msgGetHistoryStateResponse(YapProxy* proxy, int32_t queryNum, bool canGoBack, bool canGoForward)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2024; // GetHistoryStateResponse
	(*pkt) << queryNum;
	(*pkt) << canGoBack;
	(*pkt) << canGoForward;
	proxy->sendMessage();
}

void BrowserServerBase::msgUrlRedirected(YapProxy* proxy, const char* url, const char* userData)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2025; // UrlRedirected
	(*pkt) << url;
	(*pkt) << userData;
	proxy->sendMessage();
}

void BrowserServerBase::msgDialogSSLConfirm(YapProxy* proxy, const char* syncPipePath, const char* host, int32_t code, const char* certFile)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2026; // DialogSSLConfirm
	(*pkt) << syncPipePath;
	(*pkt) << host;
	(*pkt) << code;
	(*pkt) << certFile;
	proxy->sendMessage();
}

void BrowserServerBase::msgMetaViewportSet(YapProxy* proxy, double initialScale, double minimumScale, double maximumScale, int32_t width, int32_t height, bool userScalable)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2027; // MetaViewportSet
	(*pkt) << initialScale;
	(*pkt) << minimumScale;
	(*pkt) << maximumScale;
	(*pkt) << width;
	(*pkt) << height;
	(*pkt) << userScalable;
	proxy->sendMessage();
}

void BrowserServerBase::msgHighlightRects(YapProxy* proxy, const char* rectsJson)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2028; // HighlightRects
	(*pkt) << rectsJson;
	proxy->sendMessage();
}

void BrowserServerBase::msgIsEditing(YapProxy* proxy, int32_t queryNum, bool isEditing)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2029; // IsEditing
	(*pkt) << queryNum;
	(*pkt) << isEditing;
	proxy->sendMessage();
}

void BrowserServerBase::msgSaveImageAtPointResponse(YapProxy* proxy, int32_t queryNum, bool succeeded, const char* filepath)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x202A; // SaveImageAtPointResponse
	(*pkt) << queryNum;
	(*pkt) << succeeded;
	(*pkt) << filepath;
	proxy->sendMessage();
}

void BrowserServerBase::msgGetImageInfoAtPointResponse(YapProxy* proxy, int32_t queryNum, bool succeeded, const char* baseUri, const char* src, const char* title, const char* altText, int32_t width, int32_t height, const char* mimeType)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x202B; // GetImageInfoAtPointResponse
	(*pkt) << queryNum;
	(*pkt) << succeeded;
	(*pkt) << baseUri;
	(*pkt) << src;
	(*pkt) << title;
	(*pkt) << altText;
	(*pkt) << width;
	(*pkt) << height;
	(*pkt) << mimeType;
	proxy->sendMessage();
}

void BrowserServerBase::msgMakePointVisible(YapProxy* proxy, int32_t x, int32_t y)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x202C; // MakePointVisible
	(*pkt) << x;
	(*pkt) << y;
	proxy->sendMessage();
}

void BrowserServerBase::msgIsInteractiveAtPointResponse(YapProxy* proxy, int32_t queryNum, bool interractive)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x202D; // IsInteractiveAtPointResponse
	(*pkt) << queryNum;
	(*pkt) << interractive;
	proxy->sendMessage();
}

void BrowserServerBase::msgGetElementInfoAtPointResponse(YapProxy* proxy, int32_t queryNum, bool succeeded, const char* element, const char* id, const char* name, const char* cname, const char* type, int32_t left, int32_t top, int32_t right, int32_t bottom, bool isEditable)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x202E; // GetElementInfoAtPointResponse
	(*pkt) << queryNum;
	(*pkt) << succeeded;
	(*pkt) << element;
	(*pkt) << id;
	(*pkt) << name;
	(*pkt) << cname;
	(*pkt) << type;
	(*pkt) << left;
	(*pkt) << top;
	(*pkt) << right;
	(*pkt) << bottom;
	(*pkt) << isEditable;
	proxy->sendMessage();
}

void BrowserServerBase::msgCopiedToClipboard(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x202F; // CopiedToClipboard
	proxy->sendMessage();
}

void BrowserServerBase::msgPastedFromClipboard(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2030; // PastedFromClipboard
	proxy->sendMessage();
}

void BrowserServerBase::msgRemoveSelectionReticle(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2031; // RemoveSelectionReticle
	proxy->sendMessage();
}

void BrowserServerBase::msgCopySuccessResponse(YapProxy* proxy, int32_t queryNum, bool success)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2032; // CopySuccessResponse
	(*pkt) << queryNum;
	(*pkt) << success;
	proxy->sendMessage();
}

void BrowserServerBase::msgPluginFullscreenSpotlightCreate(YapProxy* proxy, int32_t spotlightHandle, int32_t rectX, int32_t rectY, int32_t rectWidth, int32_t rectHeight)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2033; // PluginFullscreenSpotlightCreate
	(*pkt) << spotlightHandle;
	(*pkt) << rectX;
	(*pkt) << rectY;
	(*pkt) << rectWidth;
	(*pkt) << rectHeight;
	proxy->sendMessage();
}

void BrowserServerBase::msgPluginFullscreenSpotlightRemove(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2034; // PluginFullscreenSpotlightRemove
	proxy->sendMessage();
}

void BrowserServerBase::msgSpellingWidgetVisibleRectUpdate(YapProxy* proxy, int32_t rectX, int32_t rectY, int32_t rectWidth, int32_t rectHeight)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2035; // SpellingWidgetVisibleRectUpdate
	(*pkt) << rectX;
	(*pkt) << rectY;
	(*pkt) << rectWidth;
	(*pkt) << rectHeight;
	proxy->sendMessage();
}

void BrowserServerBase::msgHitTestResponse(YapProxy* proxy, int32_t queryNum, const char* hitTestResultJson)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2036; // HitTestResponse
	(*pkt) << queryNum;
	(*pkt) << hitTestResultJson;
	proxy->sendMessage();
}

void BrowserServerBase::msgAddFlashRects(YapProxy* proxy, const char* rectsJson)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2037; // AddFlashRects
	(*pkt) << rectsJson;
	proxy->sendMessage();
}

void BrowserServerBase::msgRemoveFlashRects(YapProxy* proxy, const char* rectsJson)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2038; // RemoveFlashRects
	(*pkt) << rectsJson;
	proxy->sendMessage();
}

void BrowserServerBase::msgShowPrintDialog(YapProxy* proxy)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x2039; // ShowPrintDialog
	proxy->sendMessage();
}

void BrowserServerBase::msgGetTextCaretBoundsResponse(YapProxy* proxy, int32_t queryNum, int32_t left, int32_t top, int32_t right, int32_t bottom)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x203a; // GetTextCaretBoundsResponse
	(*pkt) << queryNum;
	(*pkt) << left;
	(*pkt) << top;
	(*pkt) << right;
	(*pkt) << bottom;
	proxy->sendMessage();
}

void BrowserServerBase::msgUpdateScrollableLayers(YapProxy* proxy, const char* json)
{
	YapPacket* pkt = proxy->packetMessage();
	(*pkt) << (int16_t) 0x203b; // UpdateScrollableLayers
	(*pkt) << json;
	proxy->sendMessage();
}

