BUILD_TYPE := release
# Use ?= for WEBKIT_DIR since desktop-binaries (hudson) build script will set it as needed.
WEBKIT_DIR ?= webkit4v8
PLATFORM   := x86

USE_HEAP_PROFILER ?= false

MOC := moc

STAGING_INCDIR ?= $(LUNA_STAGING)/include
STAGING_LIBDIR ?= $(LUNA_STAGING)/lib

INCLUDE_DIR := $(LUNA_STAGING)/include

LUNA_TOP_DIR = ..

WEBKIT_PATH_INCLUDE = $(LUNA_TOP_DIR)/$(WEBKIT_DIR)

INCLUDES := \
	-I$(WEBKIT_PATH_INCLUDE)/WebKit/palm/webkit \
	-I$(WEBKIT_PATH_INCLUDE)/WebKit/palm/Api \
	-I$(LUNA_STAGING)/include \
	-I../pmcertificatemgr/Incs \
	-DTARGET_DESKTOP=1

LIBS := \
	-Wl,-rpath $(LUNA_STAGING)/lib \
	-L $(LUNA_STAGING)/lib \
	-Wl,-rpath ../pmcertificatemgr/debug-x86 \
	-L ../pmcertificatemgr/debug-x86 \
	-lGL

CXXFLAGS += -DWEBOS_DESKTOP
INCLUDES += \
	-I$(WEBKIT_PATH_INCLUDE)/WebCore/platform/graphics/pg \
	-DIDEBUG=1

ifeq ("$(USE_HEAP_PROFILER)", "true")
        INCLUDES += -DUSE_HEAP_PROFILER
        LIBS += -ltcmalloc
endif

include Makefile.inc

CodeGen/CodeGen: CodeGen/YapCodeGen.cpp CodeGen/BrowserYapCommandMessages.defs
	bash -c "pushd CodeGen && qmake && popd"
	make --directory=CodeGen

# Run this target after modifying BrowserYapCommandMessages.defs to generate the
# Yap code for both the browser-adapter and BrowserServer
.PHONY : code
code: CodeGen/CodeGen
	bash -c "pushd CodeGen && ./CodeGen client Browser BrowserYapCommandMessages.defs && popd"
	#mv CodeGen/BrowserClientBase.* $(LUNA_TOP_DIR)/browser-adapter
	bash -c "pushd CodeGen && ./CodeGen server Browser BrowserYapCommandMessages.defs && popd"
	#mv CodeGen/BrowserServerBase.* $(LUNA_TOP_DIR)/BrowserServer/Src

